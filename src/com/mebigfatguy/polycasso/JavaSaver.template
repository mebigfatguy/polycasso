/*
 * polycasso - Cubism Artwork generator
 * Copyright 2010-2018 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0 
 *    
 * Unless required by applicable law or agreed to in writing, 
 * software distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and limitations 
 * under the License. 
 */
import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 * generates an image by laying semi-transparent polygons on top of each other.
 * Class generated by Polycasso (http://polycasso.sourceforge.net)
 */
public class {0} {
	private static final int DEFAULT_DELAY = 500;
	
	public static void main(String[] args) {
		int inputDelay;
		try {
			inputDelay = Integer.parseInt(args[0]);
		} catch (Exception e) {
			inputDelay = DEFAULT_DELAY;
		}
		
		final int delay = inputDelay;
		
		JFrame frame = new JFrame() {
			private static final long serialVersionUID = 1L;
			
			private Timer timer;
			private int displayCount = 0;
			
			private int[][][] polygonData = new int[][][]
			{{3}
			};
			
			private int[][] colorData = new int[][]
			{{4}
			};
			
			private float [] transparencyData = new float[]
			{{5}
			};
			
			{	
				Container cp = getContentPane();
				cp.add(new JPanel() {
					private static final long serialVersionUID = 1L;
					
					@Override
					public void paintComponent(Graphics g) {
						super.paintComponent(g);
						Graphics2D g2d = (Graphics2D) g;
						g2d.setColor(Color.BLACK);
						g2d.fillRect(0, 0, {1}, {2});					
						
						int limit;
						synchronized(timer) {
							limit = displayCount;
						}
						
						for (int i = 0; i < limit; i++) {
							Polygon polygon = new Polygon(polygonData[i][0], polygonData[i][1], polygonData[i][0].length);
							Color color = new Color(colorData[i][0], colorData[i][1], colorData[i][2]);
							g2d.setColor(color);
							AlphaComposite composite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, transparencyData[i]);
							g2d.setComposite(composite);
							g2d.fillPolygon(polygon);
						}
					}
				});
				pack();
				
				timer = new Timer(delay, new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent ae) {
						synchronized(timer) {
							if (displayCount < polygonData.length) {
								displayCount++;
							} else {
								timer.stop();
							}
							repaint();
						}
								
					}
				});
				timer.setRepeats(true);
				timer.start();
				
				setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			}
		};
		frame.setSize({1}, {2} + 20);
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
	}
}
